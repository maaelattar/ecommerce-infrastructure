import { Stack, StackProps, RemovalPolicy, Duration, SecretValue } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as rds from 'aws-cdk-lib/aws-rds';
import * as elasticache from 'aws-cdk-lib/aws-elasticache';
import * as mq from 'aws-cdk-lib/aws-amazonmq';
import * as opensearch from 'aws-cdk-lib/aws-elasticsearch';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as secretsmanager from 'aws-cdk-lib/aws-secretsmanager';
import * as ssm from 'aws-cdk-lib/aws-ssm';
import * as logs from 'aws-cdk-lib/aws-logs';
import { EnvironmentConfig } from '../config/environments';

export interface EcommerceInfrastructureProps extends StackProps {
  config: EnvironmentConfig;
}

export class EcommerceInfrastructure extends Stack {
  public vpc: ec2.Vpc;
  public readonly databases: Map<string, rds.DatabaseInstance> = new Map();
  public redis: elasticache.CfnCacheCluster;
  public rabbitmq: mq.CfnBroker;
  public opensearch: opensearch.Domain;
  public readonly config: EnvironmentConfig;

  constructor(scope: Construct, id: string, props: EcommerceInfrastructureProps) {
    super(scope, id, props);
    
    this.config = props.config;

    // Create VPC and networking
    this.createVPCAndNetworking();
    
    // Create databases for each microservice
    this.createDatabases();
    
    // Create Redis cache
    this.createRedisCache();
    
    // Create RabbitMQ message broker
    this.createRabbitMQ();
    
    // Create OpenSearch for search service
    this.createOpenSearch();
    
    // Create S3 buckets for file storage
    this.createS3Buckets();
    
    // Create outputs and parameters for service consumption
    this.createOutputsAndParameters();
  }

  private createVPCAndNetworking() {
    // For LocalStack, create simpler VPC configuration
    if (this.config.isLocalStack) {
      this.vpc = new ec2.Vpc(this, 'EcommerceVPC', {
        vpcName: `ecommerce-vpc-${this.config.environment}`,
        cidr: '10.0.0.0/16',
        maxAzs: 1, // LocalStack typically uses single AZ
        subnetConfiguration: [
          {
            name: 'PublicSubnet',
            subnetType: ec2.SubnetType.PUBLIC,
            cidrMask: 24,
          },
          {
            name: 'PrivateSubnet', 
            subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,
            cidrMask: 24,
          },
        ],
        enableDnsHostnames: true,
        enableDnsSupport: true,
      });
    } else {
      // Full VPC configuration for AWS
      this.vpc = new ec2.Vpc(this, 'EcommerceVPC', {
        vpcName: `ecommerce-vpc-${this.config.environment}`,
        cidr: '10.0.0.0/16',
        maxAzs: 3,
        subnetConfiguration: [
          {
            name: 'PublicSubnet',
            subnetType: ec2.SubnetType.PUBLIC,
            cidrMask: 24,
          },
          {
            name: 'PrivateSubnet', 
            subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,
            cidrMask: 24,
          },
          {
            name: 'DatabaseSubnet',
            subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
            cidrMask: 24,
          },
        ],
        enableDnsHostnames: true,
        enableDnsSupport: true,
      });
    }
  }

  private createDatabases() {
    // Create subnet group for databases
    const subnetType = this.config.isLocalStack 
      ? ec2.SubnetType.PRIVATE_WITH_EGRESS  // LocalStack doesn't support isolated subnets well
      : ec2.SubnetType.PRIVATE_ISOLATED;

    const dbSubnetGroup = new rds.SubnetGroup(this, 'DatabaseSubnetGroup', {
      vpc: this.vpc,
      description: 'Subnet group for RDS databases',
      vpcSubnets: {
        subnetType: subnetType,
      },
      subnetGroupName: `ecommerce-db-subnet-group-${this.config.environment}`,
    });

    // Create security group for databases
    const dbSecurityGroup = new ec2.SecurityGroup(this, 'DatabaseSecurityGroup', {
      vpc: this.vpc,
      description: 'Security group for RDS databases',
      allowAllOutbound: false,
    });

    // Allow inbound connections from VPC
    dbSecurityGroup.addIngressRule(
      ec2.Peer.ipv4(this.vpc.vpcCidrBlock),
      ec2.Port.tcp(5432),
      'Allow PostgreSQL connections from VPC'
    );

    // Create databases for each microservice
    Object.entries(this.config.databases).forEach(([serviceName, dbConfig]) => {
      // Create master user secret
      const masterUserSecret = new secretsmanager.Secret(this, `${serviceName}-db-credentials`, {
        secretName: `ecommerce/${this.config.environment}/${serviceName}/db-credentials`,
        description: `Database credentials for ${serviceName}`,
        generateSecretString: {
          secretStringTemplate: JSON.stringify({ username: 'admin' }),
          generateStringKey: 'password',
          excludeCharacters: '"@/\\',
        },
      });

      // Create RDS instance
      const database = new rds.DatabaseInstance(this, `${serviceName}-database`, {
        engine: rds.DatabaseEngine.postgres({ version: rds.PostgresEngineVersion.VER_14 }),
        instanceType: ec2.InstanceType.of(
          ec2.InstanceClass.T3,
          ec2.InstanceSize.MICRO
        ),
        credentials: rds.Credentials.fromSecret(masterUserSecret),
        databaseName: serviceName.replace('-', '_'),
        allocatedStorage: dbConfig.allocatedStorage,
        storageEncrypted: dbConfig.encryptionAtRest,
        multiAz: dbConfig.multiAZ,
        deletionProtection: dbConfig.deletionProtection,
        backupRetention: Duration.days(dbConfig.backupRetention),
        vpc: this.vpc,
        subnetGroup: dbSubnetGroup,
        securityGroups: [dbSecurityGroup],
        removalPolicy: this.config.isLocalStack ? RemovalPolicy.DESTROY : RemovalPolicy.RETAIN,
      });

      this.databases.set(serviceName, database);

      // Store database connection info in Parameter Store
      new ssm.StringParameter(this, `${serviceName}-db-endpoint`, {
        parameterName: `/ecommerce/${this.config.environment}/${serviceName}/database/endpoint`,
        stringValue: database.instanceEndpoint.hostname,
      });

      new ssm.StringParameter(this, `${serviceName}-db-port`, {
        parameterName: `/ecommerce/${this.config.environment}/${serviceName}/database/port`,
        stringValue: database.instanceEndpoint.port.toString(),
      });

      new ssm.StringParameter(this, `${serviceName}-db-name`, {
        parameterName: `/ecommerce/${this.config.environment}/${serviceName}/database/name`,
        stringValue: serviceName.replace('-', '_'),
      });
    });
  }

  private createRedisCache() {
    // Create subnet group for ElastiCache
    const cacheSubnetGroup = new elasticache.CfnSubnetGroup(this, 'CacheSubnetGroup', {
      description: 'Subnet group for ElastiCache',
      subnetIds: this.vpc.privateSubnets.map(subnet => subnet.subnetId),
      cacheSubnetGroupName: `ecommerce-cache-subnet-group-${this.config.environment}`,
    });

    // Create security group for cache
    const cacheSecurityGroup = new ec2.SecurityGroup(this, 'CacheSecurityGroup', {
      vpc: this.vpc,
      description: 'Security group for Redis cache',
      allowAllOutbound: false,
    });

    cacheSecurityGroup.addIngressRule(
      ec2.Peer.ipv4(this.vpc.vpcCidrBlock),
      ec2.Port.tcp(6379),
      'Allow Redis connections from VPC'
    );

    // Create Redis cache cluster
    this.redis = new elasticache.CfnCacheCluster(this, 'RedisCache', {
      cacheNodeType: this.config.cache.nodeType,
      engine: this.config.cache.engine,
      engineVersion: this.config.cache.engineVersion,
      numCacheNodes: this.config.cache.numCacheNodes,
      cacheSubnetGroupName: cacheSubnetGroup.cacheSubnetGroupName,
      vpcSecurityGroupIds: [cacheSecurityGroup.securityGroupId],
      clusterName: `ecommerce-redis-${this.config.environment}`,
    });

    this.redis.addDependency(cacheSubnetGroup);

    // Store Redis connection info
    new ssm.StringParameter(this, 'redis-endpoint', {
      parameterName: `/ecommerce/${this.config.environment}/cache/redis/endpoint`,
      stringValue: this.redis.attrRedisEndpointAddress || 'localhost', // fallback for LocalStack
    });
  }

  private createRabbitMQ() {
    // Create security group for RabbitMQ
    const mqSecurityGroup = new ec2.SecurityGroup(this, 'RabbitMQSecurityGroup', {
      vpc: this.vpc,
      description: 'Security group for RabbitMQ broker',
      allowAllOutbound: true,
    });

    mqSecurityGroup.addIngressRule(
      ec2.Peer.ipv4(this.vpc.vpcCidrBlock),
      ec2.Port.tcp(5672),
      'Allow AMQP connections from VPC'
    );

    mqSecurityGroup.addIngressRule(
      ec2.Peer.ipv4(this.vpc.vpcCidrBlock),
      ec2.Port.tcp(15672),
      'Allow RabbitMQ Management UI from VPC'
    );

    // Create RabbitMQ credentials
    const mqCredentials = new secretsmanager.Secret(this, 'rabbitmq-credentials', {
      secretName: `ecommerce/${this.config.environment}/rabbitmq/credentials`,
      description: 'RabbitMQ broker credentials',
      generateSecretString: {
        secretStringTemplate: JSON.stringify({ username: 'admin' }),
        generateStringKey: 'password',
        excludeCharacters: '"@/\\',
      },
    });

    // Create RabbitMQ broker
    this.rabbitmq = new mq.CfnBroker(this, 'RabbitMQBroker', {
      brokerName: `ecommerce-rabbitmq-${this.config.environment}`,
      deploymentMode: this.config.messageBroker.deploymentMode,
      engineType: 'RABBITMQ',
      engineVersion: '3.10.10',
      hostInstanceType: this.config.messageBroker.hostInstanceType,
      publiclyAccessible: false,
      autoMinorVersionUpgrade: true,
      subnetIds: this.config.messageBroker.deploymentMode === 'CLUSTER' 
        ? this.vpc.privateSubnets.slice(0, 2).map(subnet => subnet.subnetId)
        : [this.vpc.privateSubnets[0].subnetId],
      securityGroups: [mqSecurityGroup.securityGroupId],
      users: [{
        consoleAccess: true,
        username: 'admin',
        password: mqCredentials.secretValueFromJson('password').unsafeUnwrap(),
      }],
    });

    // Store RabbitMQ connection info
    new ssm.StringParameter(this, 'rabbitmq-endpoint', {
      parameterName: `/ecommerce/${this.config.environment}/messaging/rabbitmq/endpoint`,
      stringValue: this.rabbitmq.attrAmqpEndpoints ? 
        this.rabbitmq.attrAmqpEndpoints.toString() : 'amqp://localhost:5672',
    });
  }

  private createOpenSearch() {
    // Create security group for OpenSearch
    const searchSecurityGroup = new ec2.SecurityGroup(this, 'OpenSearchSecurityGroup', {
      vpc: this.vpc,
      description: 'Security group for OpenSearch domain',
      allowAllOutbound: false,
    });

    searchSecurityGroup.addIngressRule(
      ec2.Peer.ipv4(this.vpc.vpcCidrBlock),
      ec2.Port.tcp(443),
      'Allow HTTPS connections from VPC'
    );

    // Create OpenSearch domain
    this.opensearch = new opensearch.Domain(this, 'OpenSearchDomain', {
      domainName: `ecommerce-search-${this.config.environment}`,
      version: opensearch.ElasticsearchVersion.V7_10,
      capacity: {
        dataNodes: this.config.search.instanceCount,
        dataNodeInstanceType: this.config.search.instanceType,
        masterNodes: this.config.search.masterNodes,
        masterNodeInstanceType: this.config.search.masterNodes > 0 ? 't3.small.search' : undefined,
      },
      ebs: {
        volumeSize: 20,
        volumeType: ec2.EbsDeviceVolumeType.GP3,
      },
      vpc: {
        subnets: this.vpc.selectSubnets({
          subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,
        }),
        securityGroups: [searchSecurityGroup],
      },
      nodeToNodeEncryption: this.config.search.nodeToNodeEncryption,
      encryptionAtRest: {
        enabled: this.config.search.encryptionAtRest,
      },
      enforceHttps: this.config.search.enforceHTTPS,
      removalPolicy: this.config.isLocalStack ? RemovalPolicy.DESTROY : RemovalPolicy.RETAIN,
    });

    // Store OpenSearch endpoint
    new ssm.StringParameter(this, 'opensearch-endpoint', {
      parameterName: `/ecommerce/${this.config.environment}/search/opensearch/endpoint`,
      stringValue: this.opensearch.domainEndpoint,
    });
  }

  private createS3Buckets() {
    const buckets = [
      { name: 'product-images', description: 'Product images and media' },
      { name: 'user-uploads', description: 'User uploaded files' },
      { name: 'order-documents', description: 'Order receipts and documents' },
      { name: 'backup-data', description: 'Database backups and exports' },
    ];

    buckets.forEach(({ name, description }) => {
      const bucket = new s3.Bucket(this, `${name}-bucket`, {
        bucketName: `ecommerce-${name}-${this.config.environment}-${this.account}`,
        versioned: this.config.s3.versioningEnabled,
        encryption: this.config.s3.encryptionAtRest ? 
          s3.BucketEncryption.S3_MANAGED : s3.BucketEncryption.UNENCRYPTED,
        blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
        removalPolicy: this.config.isLocalStack ? RemovalPolicy.DESTROY : RemovalPolicy.RETAIN,
      });

      // Store S3 bucket info
      new ssm.StringParameter(this, `${name}-bucket-name`, {
        parameterName: `/ecommerce/${this.config.environment}/storage/s3/${name}/bucket-name`,
        stringValue: bucket.bucketName,
      });
    });
  }

  private createOutputsAndParameters() {
    // Create log groups for CloudWatch (if enabled)
    if (this.config.monitoring.enableCloudWatch) {
      const services = ['user-service', 'product-service', 'order-service', 'payment-service', 'inventory-service', 'search-service'];
      
      services.forEach(service => {
        new logs.LogGroup(this, `${service}-logs`, {
          logGroupName: `/aws/ecs/ecommerce/${this.config.environment}/${service}`,
          retention: logs.RetentionDays.TWO_WEEKS,
          removalPolicy: RemovalPolicy.DESTROY,
        });
      });
    }

    // Store environment configuration
    new ssm.StringParameter(this, 'environment-config', {
      parameterName: `/ecommerce/${this.config.environment}/config/environment`,
      stringValue: this.config.environment,
    });

    new ssm.StringParameter(this, 'is-localstack', {
      parameterName: `/ecommerce/${this.config.environment}/config/is-localstack`,
      stringValue: this.config.isLocalStack.toString(),
    });

    // Store VPC information
    new ssm.StringParameter(this, 'vpc-id', {
      parameterName: `/ecommerce/${this.config.environment}/network/vpc-id`,
      stringValue: this.vpc.vpcId,
    });

    new ssm.StringParameter(this, 'private-subnet-ids', {
      parameterName: `/ecommerce/${this.config.environment}/network/private-subnet-ids`,
      stringValue: this.vpc.privateSubnets.map(subnet => subnet.subnetId).join(','),
    });

    new ssm.StringParameter(this, 'public-subnet-ids', {
      parameterName: `/ecommerce/${this.config.environment}/network/public-subnet-ids`,
      stringValue: this.vpc.publicSubnets.map(subnet => subnet.subnetId).join(','),
    });
  }
}